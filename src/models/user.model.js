import mongoose, {Schema} from "mongoose";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";

/************* CREATE THE USER MODEL,WHAT AND HOW TO STORE ********/

const userSchema = new Schema(
    {
        username: {
            type: String,
            required: true,
            unique: true,
            lowercase: true,
            trim: true, 
            index: true
        },
        email: {
            type: String,
            required: true,
            unique: true,
            lowecase: true,
            trim: true, 
        },
        fullName: {
            type: String,
            required: true,
            trim: true, 
            index: true
        },
        avatar: {
            type: String, // cloudinary url
            required: true,
        },
        coverImage: {
            type: String, // cloudinary url
        },
        watchHistory: [
            {
                //si field ta depended video model er upor, video er id di ai jagat aya store hoibo
                type: Schema.Types.ObjectId,
                ref: "Video"
            }
        ],
        password: {
            type: String,
            required: [true, 'Password is required']
        },
        refreshToken: {
            type: String
        }

    },
    {
        timestamps: true
    }
    
)

/************* USER MODEL CREATED ***********/

/************ HOOKS FOR ENCRYPTING PASSWORDS ********/



//***********STEP-1 > HASH PASSWORD */
//pre hook, for executing middlewares one after another when each middleware will click on next
userSchema.pre( "save" , async function (next) {
    /********2.problem hoilo,jodi ami sudhu this.password re hash koira next() apply koira dei,
     toile joto bar ami creditials a je ku u kisu change kori,sob bar change hoia jaiboga hashed password ta,
     suppose ami avatar , ba profile dp change kori,toile hashed pasword ta  hange hoibo,BUT am emon chai na,
     ami chi jate jokhon ami sudhu password chnge korum,tokhon oi jated hashed password ta change hoy*******/
     

    //*************ONE WAY TO WRITE
    //  if(this.isModified("password")){
    //     //mane, jodi password fiel change hoy, toile oi hash change hoibo
    //     this.password = bcrypt.hash(this.password,10)
    //     
    //  }
    //next()


    //***********ANOTHER WAY
     
    //jodi password er field da change na hoy, direct next a jaoga, r jodi change hoy, toile niche toh code lekha ase oi
    if(!this.isModified("password"))return next();
    
    //1. jokhon oi ekta pass word nemu, uida re enccrypt koira save korum
    //this.password=bcrypt.hash(this.password,no._of_rounds)
    //bcrypt algorithm diya hash korum password re, no. of rounds mane koybar ami aida re salting korum
    //this may be time consuming, r jotokho ida complete na hoitse ami age move kortam na..., so use await
    this.password = await bcrypt.hash(this.password,10)
    //now move to next
    next()
})

//****STEP-2 > CHECK PASSWORD */
userSchema.method.isPasswordCorrect = async function (password){
    return await bcrypt.compare(password, this.password)
}

//****STEP-3 > TOKEN GENERATION */

//1> Access token...this ethood does not need much long time, so need to use async
userSchema.method.generateAccessToken = function(){
    //there's a jwt method for signing in
    jwt.sign({
        //write the payloads here
        _id : this._id ,//this field is automatically generated by mongoDb
        email : this.email,
        username : this.username,
        fullName : this.fullName
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
        expiresIn : process.env.ACCESS_TOKEN_EXPIRY
    }
        
    )
}

//***** 2> Refresh Token */
userSchema.method.generateRefreshToken = function(){
    //there's a jwt method for signing in
    jwt.sign({
         
        _id : this._id , 
       
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
        expiresIn : process.env.REFRESH_TOKEN_EXPIRY
    }
        
    )
}


//************** HOOKS WRITTEN SUCCESFULLY ************/

export const User = mongoose.model("User", userSchema) ;